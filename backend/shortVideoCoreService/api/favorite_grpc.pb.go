// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: favorite.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShortVideoCoreFavoriteServiceClient is the client API for ShortVideoCoreFavoriteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortVideoCoreFavoriteServiceClient interface {
	FavoriteAction(ctx context.Context, in *FavroriteActionRequest, opts ...grpc.CallOption) (*FavoriteActionResponse, error)
	ListFavoriteList(ctx context.Context, in *ListFavoriteRequest, opts ...grpc.CallOption) (*ListFavoriteResponse, error)
	IsFavorite(ctx context.Context, in *IsFavoriteRequest, opts ...grpc.CallOption) (*IsFavoriteResponse, error)
	CountFavorite(ctx context.Context, in *CountFavoriteRequest, opts ...grpc.CallOption) (*CountFavoriteResponse, error)
}

type shortVideoCoreFavoriteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShortVideoCoreFavoriteServiceClient(cc grpc.ClientConnInterface) ShortVideoCoreFavoriteServiceClient {
	return &shortVideoCoreFavoriteServiceClient{cc}
}

func (c *shortVideoCoreFavoriteServiceClient) FavoriteAction(ctx context.Context, in *FavroriteActionRequest, opts ...grpc.CallOption) (*FavoriteActionResponse, error) {
	out := new(FavoriteActionResponse)
	err := c.cc.Invoke(ctx, "/api.ShortVideoCoreFavoriteService/FavoriteAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoCoreFavoriteServiceClient) ListFavoriteList(ctx context.Context, in *ListFavoriteRequest, opts ...grpc.CallOption) (*ListFavoriteResponse, error) {
	out := new(ListFavoriteResponse)
	err := c.cc.Invoke(ctx, "/api.ShortVideoCoreFavoriteService/ListFavoriteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoCoreFavoriteServiceClient) IsFavorite(ctx context.Context, in *IsFavoriteRequest, opts ...grpc.CallOption) (*IsFavoriteResponse, error) {
	out := new(IsFavoriteResponse)
	err := c.cc.Invoke(ctx, "/api.ShortVideoCoreFavoriteService/IsFavorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoCoreFavoriteServiceClient) CountFavorite(ctx context.Context, in *CountFavoriteRequest, opts ...grpc.CallOption) (*CountFavoriteResponse, error) {
	out := new(CountFavoriteResponse)
	err := c.cc.Invoke(ctx, "/api.ShortVideoCoreFavoriteService/CountFavorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortVideoCoreFavoriteServiceServer is the server API for ShortVideoCoreFavoriteService service.
// All implementations must embed UnimplementedShortVideoCoreFavoriteServiceServer
// for forward compatibility
type ShortVideoCoreFavoriteServiceServer interface {
	FavoriteAction(context.Context, *FavroriteActionRequest) (*FavoriteActionResponse, error)
	ListFavoriteList(context.Context, *ListFavoriteRequest) (*ListFavoriteResponse, error)
	IsFavorite(context.Context, *IsFavoriteRequest) (*IsFavoriteResponse, error)
	CountFavorite(context.Context, *CountFavoriteRequest) (*CountFavoriteResponse, error)
	mustEmbedUnimplementedShortVideoCoreFavoriteServiceServer()
}

// UnimplementedShortVideoCoreFavoriteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShortVideoCoreFavoriteServiceServer struct {
}

func (UnimplementedShortVideoCoreFavoriteServiceServer) FavoriteAction(context.Context, *FavroriteActionRequest) (*FavoriteActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteAction not implemented")
}
func (UnimplementedShortVideoCoreFavoriteServiceServer) ListFavoriteList(context.Context, *ListFavoriteRequest) (*ListFavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFavoriteList not implemented")
}
func (UnimplementedShortVideoCoreFavoriteServiceServer) IsFavorite(context.Context, *IsFavoriteRequest) (*IsFavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFavorite not implemented")
}
func (UnimplementedShortVideoCoreFavoriteServiceServer) CountFavorite(context.Context, *CountFavoriteRequest) (*CountFavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountFavorite not implemented")
}
func (UnimplementedShortVideoCoreFavoriteServiceServer) mustEmbedUnimplementedShortVideoCoreFavoriteServiceServer() {
}

// UnsafeShortVideoCoreFavoriteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortVideoCoreFavoriteServiceServer will
// result in compilation errors.
type UnsafeShortVideoCoreFavoriteServiceServer interface {
	mustEmbedUnimplementedShortVideoCoreFavoriteServiceServer()
}

func RegisterShortVideoCoreFavoriteServiceServer(s grpc.ServiceRegistrar, srv ShortVideoCoreFavoriteServiceServer) {
	s.RegisterService(&ShortVideoCoreFavoriteService_ServiceDesc, srv)
}

func _ShortVideoCoreFavoriteService_FavoriteAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavroriteActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoCoreFavoriteServiceServer).FavoriteAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ShortVideoCoreFavoriteService/FavoriteAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoCoreFavoriteServiceServer).FavoriteAction(ctx, req.(*FavroriteActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideoCoreFavoriteService_ListFavoriteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoCoreFavoriteServiceServer).ListFavoriteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ShortVideoCoreFavoriteService/ListFavoriteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoCoreFavoriteServiceServer).ListFavoriteList(ctx, req.(*ListFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideoCoreFavoriteService_IsFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoCoreFavoriteServiceServer).IsFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ShortVideoCoreFavoriteService/IsFavorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoCoreFavoriteServiceServer).IsFavorite(ctx, req.(*IsFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideoCoreFavoriteService_CountFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoCoreFavoriteServiceServer).CountFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ShortVideoCoreFavoriteService/CountFavorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoCoreFavoriteServiceServer).CountFavorite(ctx, req.(*CountFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortVideoCoreFavoriteService_ServiceDesc is the grpc.ServiceDesc for ShortVideoCoreFavoriteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortVideoCoreFavoriteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ShortVideoCoreFavoriteService",
	HandlerType: (*ShortVideoCoreFavoriteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FavoriteAction",
			Handler:    _ShortVideoCoreFavoriteService_FavoriteAction_Handler,
		},
		{
			MethodName: "ListFavoriteList",
			Handler:    _ShortVideoCoreFavoriteService_ListFavoriteList_Handler,
		},
		{
			MethodName: "IsFavorite",
			Handler:    _ShortVideoCoreFavoriteService_IsFavorite_Handler,
		},
		{
			MethodName: "CountFavorite",
			Handler:    _ShortVideoCoreFavoriteService_CountFavorite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "favorite.proto",
}
