// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: message.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShortVideoCoreMessageServiceClient is the client API for ShortVideoCoreMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortVideoCoreMessageServiceClient interface {
	// 列出所有的聊天
	ListChat(ctx context.Context, in *ListChatRequest, opts ...grpc.CallOption) (*ListChatResponse, error)
	// 加载聊天记录
	LoadMessageRecords(ctx context.Context, in *LoadMessageRecordsRequest, opts ...grpc.CallOption) (*LoadMessageRecordsResponse, error)
	// 发送信息
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
}

type shortVideoCoreMessageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShortVideoCoreMessageServiceClient(cc grpc.ClientConnInterface) ShortVideoCoreMessageServiceClient {
	return &shortVideoCoreMessageServiceClient{cc}
}

func (c *shortVideoCoreMessageServiceClient) ListChat(ctx context.Context, in *ListChatRequest, opts ...grpc.CallOption) (*ListChatResponse, error) {
	out := new(ListChatResponse)
	err := c.cc.Invoke(ctx, "/api.ShortVideoCoreMessageService/ListChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoCoreMessageServiceClient) LoadMessageRecords(ctx context.Context, in *LoadMessageRecordsRequest, opts ...grpc.CallOption) (*LoadMessageRecordsResponse, error) {
	out := new(LoadMessageRecordsResponse)
	err := c.cc.Invoke(ctx, "/api.ShortVideoCoreMessageService/LoadMessageRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoCoreMessageServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, "/api.ShortVideoCoreMessageService/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortVideoCoreMessageServiceServer is the server API for ShortVideoCoreMessageService service.
// All implementations must embed UnimplementedShortVideoCoreMessageServiceServer
// for forward compatibility
type ShortVideoCoreMessageServiceServer interface {
	// 列出所有的聊天
	ListChat(context.Context, *ListChatRequest) (*ListChatResponse, error)
	// 加载聊天记录
	LoadMessageRecords(context.Context, *LoadMessageRecordsRequest) (*LoadMessageRecordsResponse, error)
	// 发送信息
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	mustEmbedUnimplementedShortVideoCoreMessageServiceServer()
}

// UnimplementedShortVideoCoreMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShortVideoCoreMessageServiceServer struct {
}

func (UnimplementedShortVideoCoreMessageServiceServer) ListChat(context.Context, *ListChatRequest) (*ListChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChat not implemented")
}
func (UnimplementedShortVideoCoreMessageServiceServer) LoadMessageRecords(context.Context, *LoadMessageRecordsRequest) (*LoadMessageRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadMessageRecords not implemented")
}
func (UnimplementedShortVideoCoreMessageServiceServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedShortVideoCoreMessageServiceServer) mustEmbedUnimplementedShortVideoCoreMessageServiceServer() {
}

// UnsafeShortVideoCoreMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortVideoCoreMessageServiceServer will
// result in compilation errors.
type UnsafeShortVideoCoreMessageServiceServer interface {
	mustEmbedUnimplementedShortVideoCoreMessageServiceServer()
}

func RegisterShortVideoCoreMessageServiceServer(s grpc.ServiceRegistrar, srv ShortVideoCoreMessageServiceServer) {
	s.RegisterService(&ShortVideoCoreMessageService_ServiceDesc, srv)
}

func _ShortVideoCoreMessageService_ListChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoCoreMessageServiceServer).ListChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ShortVideoCoreMessageService/ListChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoCoreMessageServiceServer).ListChat(ctx, req.(*ListChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideoCoreMessageService_LoadMessageRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadMessageRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoCoreMessageServiceServer).LoadMessageRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ShortVideoCoreMessageService/LoadMessageRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoCoreMessageServiceServer).LoadMessageRecords(ctx, req.(*LoadMessageRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideoCoreMessageService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoCoreMessageServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ShortVideoCoreMessageService/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoCoreMessageServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortVideoCoreMessageService_ServiceDesc is the grpc.ServiceDesc for ShortVideoCoreMessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortVideoCoreMessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ShortVideoCoreMessageService",
	HandlerType: (*ShortVideoCoreMessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListChat",
			Handler:    _ShortVideoCoreMessageService_ListChat_Handler,
		},
		{
			MethodName: "LoadMessageRecords",
			Handler:    _ShortVideoCoreMessageService_LoadMessageRecords_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _ShortVideoCoreMessageService_SendMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
