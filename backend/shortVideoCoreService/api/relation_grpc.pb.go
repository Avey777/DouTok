// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: relation.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShortVideoCoreRelationServiceClient is the client API for ShortVideoCoreRelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortVideoCoreRelationServiceClient interface {
	RelationAction(ctx context.Context, in *RelationActionRequest, opts ...grpc.CallOption) (*RelationActionResponse, error)
	ListRelation(ctx context.Context, in *ListRelationRequest, opts ...grpc.CallOption) (*ListRelationResponse, error)
	CountRelation(ctx context.Context, in *CountRelationRequest, opts ...grpc.CallOption) (*CountRelationResponse, error)
}

type shortVideoCoreRelationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShortVideoCoreRelationServiceClient(cc grpc.ClientConnInterface) ShortVideoCoreRelationServiceClient {
	return &shortVideoCoreRelationServiceClient{cc}
}

func (c *shortVideoCoreRelationServiceClient) RelationAction(ctx context.Context, in *RelationActionRequest, opts ...grpc.CallOption) (*RelationActionResponse, error) {
	out := new(RelationActionResponse)
	err := c.cc.Invoke(ctx, "/api.ShortVideoCoreRelationService/RelationAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoCoreRelationServiceClient) ListRelation(ctx context.Context, in *ListRelationRequest, opts ...grpc.CallOption) (*ListRelationResponse, error) {
	out := new(ListRelationResponse)
	err := c.cc.Invoke(ctx, "/api.ShortVideoCoreRelationService/ListRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoCoreRelationServiceClient) CountRelation(ctx context.Context, in *CountRelationRequest, opts ...grpc.CallOption) (*CountRelationResponse, error) {
	out := new(CountRelationResponse)
	err := c.cc.Invoke(ctx, "/api.ShortVideoCoreRelationService/CountRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortVideoCoreRelationServiceServer is the server API for ShortVideoCoreRelationService service.
// All implementations must embed UnimplementedShortVideoCoreRelationServiceServer
// for forward compatibility
type ShortVideoCoreRelationServiceServer interface {
	RelationAction(context.Context, *RelationActionRequest) (*RelationActionResponse, error)
	ListRelation(context.Context, *ListRelationRequest) (*ListRelationResponse, error)
	CountRelation(context.Context, *CountRelationRequest) (*CountRelationResponse, error)
	mustEmbedUnimplementedShortVideoCoreRelationServiceServer()
}

// UnimplementedShortVideoCoreRelationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShortVideoCoreRelationServiceServer struct {
}

func (UnimplementedShortVideoCoreRelationServiceServer) RelationAction(context.Context, *RelationActionRequest) (*RelationActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationAction not implemented")
}
func (UnimplementedShortVideoCoreRelationServiceServer) ListRelation(context.Context, *ListRelationRequest) (*ListRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRelation not implemented")
}
func (UnimplementedShortVideoCoreRelationServiceServer) CountRelation(context.Context, *CountRelationRequest) (*CountRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountRelation not implemented")
}
func (UnimplementedShortVideoCoreRelationServiceServer) mustEmbedUnimplementedShortVideoCoreRelationServiceServer() {
}

// UnsafeShortVideoCoreRelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortVideoCoreRelationServiceServer will
// result in compilation errors.
type UnsafeShortVideoCoreRelationServiceServer interface {
	mustEmbedUnimplementedShortVideoCoreRelationServiceServer()
}

func RegisterShortVideoCoreRelationServiceServer(s grpc.ServiceRegistrar, srv ShortVideoCoreRelationServiceServer) {
	s.RegisterService(&ShortVideoCoreRelationService_ServiceDesc, srv)
}

func _ShortVideoCoreRelationService_RelationAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoCoreRelationServiceServer).RelationAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ShortVideoCoreRelationService/RelationAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoCoreRelationServiceServer).RelationAction(ctx, req.(*RelationActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideoCoreRelationService_ListRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoCoreRelationServiceServer).ListRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ShortVideoCoreRelationService/ListRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoCoreRelationServiceServer).ListRelation(ctx, req.(*ListRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideoCoreRelationService_CountRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoCoreRelationServiceServer).CountRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ShortVideoCoreRelationService/CountRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoCoreRelationServiceServer).CountRelation(ctx, req.(*CountRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortVideoCoreRelationService_ServiceDesc is the grpc.ServiceDesc for ShortVideoCoreRelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortVideoCoreRelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ShortVideoCoreRelationService",
	HandlerType: (*ShortVideoCoreRelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RelationAction",
			Handler:    _ShortVideoCoreRelationService_RelationAction_Handler,
		},
		{
			MethodName: "ListRelation",
			Handler:    _ShortVideoCoreRelationService_ListRelation_Handler,
		},
		{
			MethodName: "CountRelation",
			Handler:    _ShortVideoCoreRelationService_CountRelation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relation.proto",
}
